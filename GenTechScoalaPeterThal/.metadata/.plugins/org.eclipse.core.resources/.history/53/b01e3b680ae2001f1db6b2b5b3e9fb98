package services;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import repository.BookRepository;
import ro.scoalaPeterThalClasses.Book;

@Service
public class BookService {

    @Autowired
    private BookRepository bookRepository;

    public List<Book> getAllBooks() {
    	try {       return (List<Book>) bookRepository.findAll();
    	
    	
    } catch (Exception e) {
        // Log error here or handle it
        throw new RuntimeException("Error while fetching books", e);
    }
    }

    public List<Book> searchBooks(String title, String author, String genre) {
        List<Book> books = (List<Book>) bookRepository.findAll();

        if (title != null && !title.isEmpty()) {
            books = books.stream()
                .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))
                .collect(Collectors.toList());
        }

        if (author != null && !author.isEmpty()) {
            books = books.stream()
                .filter(book -> book.getAuthor().toLowerCase().contains(author.toLowerCase()))
                .collect(Collectors.toList());
        }

        if (genre != null && !genre.isEmpty()) {
            books = books.stream()
                .filter(book -> book.getGenre().toLowerCase().contains(genre.toLowerCase()))
                .collect(Collectors.toList());
        }

        return books;
    }

    /*   public List<Book> sortBooks(String sortBy) {
      if ("title".equals(sortBy)) {
            return bookRepository.findAll(Sort.by(Sort.Order.asc("title")));
        } else if ("author".equals(sortBy)) {
            return bookRepository.findAll(Sort.by(Sort.Order.asc("author")));
        } else {
            return bookRepository.findAll(Sort.by(Sort.Order.asc("year")));
        }
    }*/
}
