package ro.scoalaPeterThal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import repository.BookRepository;
import repository.BookSpecification;
import repository.GenreRepository;
import repository.LoanRepository;
import basics.*;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Controller
public class BookContrl {
	@Autowired
	BookRepository bookRepository;

	@Autowired
	GenreRepository genreRepository;

	@Autowired
	LoanRepository loanRepository;
	@Autowired
	private HttpSession session;

	@GetMapping("/books")
	public String BooksList() {
		return "bookslist";
	}

	public List<Genre> getAllGenres() {
		return genreRepository.findAll();
	}

	@GetMapping("/addBook")
	public String showAddBookForm(Model model) {
		if (!CheckIfUserIsLoggedIn())
			return "redirect:/login";
		model.addAttribute("book", new Book());
		model.addAttribute("genres", genreRepository.findAll());
		return "addBook";
	}

	@PostMapping("/addBook")
	public String addBook(@Valid @ModelAttribute Book book, BindingResult result, Model model) {

		if (result.hasErrors()) {

			model.addAttribute("genres", genreRepository.findAll());
			return "addBook";
		}
		bookRepository.save(book);
		return "addBook";
	}

	@DeleteMapping("/deleteBook/{id}")
	public ResponseEntity<String> deleteBook(@PathVariable Long id) {

		Optional<Book> bookOptional = bookRepository.findById(id);
		if (bookOptional.isPresent()) {
			bookRepository.delete(bookOptional.get());
			return ResponseEntity.ok("Cartea a fost ștearsă cu succes!");
		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Cartea nu a fost găsită!");
		}
	}

	@PostMapping("/borrowBook/{id}")
	public ResponseEntity<String> borrowBook(@PathVariable Long id) {
		Optional<Book> bookOptional = bookRepository.findById(id);
		if (bookOptional.isPresent()) {
			Book book = bookOptional.get();

			Loan loan = new Loan();
			loan.setBook(book);
			loan.setLoanDate(LocalDate.now());
			loan.setReturnDate(LocalDate.now().plusWeeks(2));

			loanRepository.save(loan);
			
			return ResponseEntity.ok("Cartea a fost împrumutată cu succes!");

		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Cartea nu a fost găsită!");
		}
	}

	@PostMapping("/returnBook/{id}")
	public ResponseEntity<String> returnBook(@PathVariable Long id) {
		Optional<Book> bookOptional = bookRepository.findById(id);
		if (bookOptional.isPresent()) {
			Book book = bookOptional.get();

			Optional<Loan> loanOptional = loanRepository.findByBook(book);
			if (loanOptional.isPresent()) {
				Loan loan = loanOptional.get();
				loan.setReturnDate(LocalDate.now());
				loanRepository.save(loan);
			}

			return ResponseEntity.ok("Cartea a fost restituită cu succes!");

		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Cartea nu a fost găsită!");
		}
	}

	public Boolean CheckIfUserIsLoggedIn() {
		AppUser sessionUser = (AppUser) session.getAttribute("sessionUser");

		return sessionUser != null;
	}

	@GetMapping("/booksAjax")
	@ResponseBody
	public Map<String, Object> getBooks(@RequestParam(value = "title", required = false) String title,
			@RequestParam("draw") int draw, @RequestParam(value = "author", required = false) String author,
			@RequestParam(value = "publicationYear", required = false) Integer publicationYear,
			@RequestParam(value = "genre", required = false) String genreId,
			@RequestParam(value = "search[value]", required = false) String searchValue,
			@RequestParam(value = "start", defaultValue = "0") int start,
			@RequestParam(value = "length", defaultValue = "10") int length,
			@RequestParam(value = "order[0][column]", defaultValue = "0") int orderColumn,
			@RequestParam(value = "order[0][dir]", defaultValue = "asc") String orderDir) {

		// Paginare
		Pageable pageable = PageRequest.of(start / length, length, "asc".equals(orderDir)
				? Sort.by(orderColumn == 0 ? "title" : orderColumn == 1 ? "author" : "publicationYear")
				: Sort.by(orderColumn == 0 ? "title" : orderColumn == 1 ? "author" : "publicationYear").descending());
		Long genId = null;
		if (genreId != "") {
			List<Genre> genres = genreRepository.findFirstByNameContaining(genreId);

			System.out.println(genreId + " " + genres);
			genId = (genres != null && !genres.isEmpty()) ? genres.get(0).getId() : null;
		}
		List<Book> books = searchBooksByFilter(title, author, genId, publicationYear, searchValue, pageable);

		Map<String, Object> response = new HashMap<>();
		response.put("draw", draw);
		response.put("recordsTotal", bookRepository.count());
		response.put("recordsFiltered", books.size());
		response.put("data", books);

		return response;
	}

	@GetMapping("/booksAjaxWithAvailabilityWithPag")
	@ResponseBody
	public Map<String, Object> getBooksWithAvailabilityWithPag(@RequestParam(value = "title", required = false) String title,
	        @RequestParam("draw") int draw, @RequestParam(value = "author", required = false) String author,
	        @RequestParam(value = "publicationYear", required = false) Integer publicationYear,
	        @RequestParam(value = "genre", required = false) String genreId,
	        @RequestParam(value = "search[value]", required = false) String searchValue,
	        @RequestParam(value = "start", defaultValue = "0") int start,
	        @RequestParam(value = "length", defaultValue = "10") int length,
	        @RequestParam(value = "order[0][column]", defaultValue = "0") int orderColumn,
	        @RequestParam(value = "order[0][dir]", defaultValue = "asc") String orderDir,
	        @RequestParam(value = "availability", required = false) String availability) {

	    // Creare Pageable pentru sortare
	    Pageable pageable = PageRequest.of(start / length, length, "asc".equals(orderDir)
	            ? Sort.by(orderColumn == 0 ? "title" : orderColumn == 1 ? "author" : "publicationYear")
	            : Sort.by(orderColumn == 0 ? "title" : orderColumn == 1 ? "author" : "publicationYear").descending());

	    Long genId = null;
	    if (genreId != "") {
	        List<Genre> genres = genreRepository.findFirstByNameContaining(genreId);
	        genId = (genres != null && !genres.isEmpty()) ? genres.get(0).getId() : null;
	    }

	    // Aplică filtrul
	    List<Book> books = searchBooksByFilter(title, author, genId, publicationYear, searchValue, pageable);
	    List<BookDTO> bookDTOs = new ArrayList<>();

	    // Iterează prin cărți și creează DTO-uri
	    for (Book book : books) {
	        BookDTO bookDTO = new BookDTO();
	        var avab = getAvailabilityStatus(book);
	        boolean addBook = true;

	        if (addBook) {
	            bookDTO.setId(book.getId());
	            bookDTO.setTitle(book.getTitle());
	            bookDTO.setAuthor(book.getAuthor());
	            bookDTO.setGenre(book.getGenre());
	            bookDTO.setPublicationYear(book.getPublicationYear());
	            bookDTO.setAvailability(avab);
	            bookDTOs.add(bookDTO);
	        }
	    }

	    // Obține numărul total de cărți filtrate
	    long totalFilteredRecords = bookDTOs.size();
	    long totalRecords = bookRepository.count(); // Numărul total de cărți, fără filtre

	    // Calculăm sublista de cărți pentru pagina curentă
	    int toIndex = (int) Math.min(start + length, totalFilteredRecords);
	    List<BookDTO> paginatedBooks = bookDTOs.subList(start, toIndex);

	    // Răspunsul paginat
	    Map<String, Object> response = new HashMap<>();
	    response.put("draw", draw);
	    response.put("recordsTotal", totalRecords); // Total cărți (fără filtrare)
	    response.put("recordsFiltered", totalFilteredRecords); // Total cărți filtrate
	    response.put("data", paginatedBooks);

	    return response;
	}
	@GetMapping("/booksAjaxWithAvailability")
	@ResponseBody
	public Map<String, Object> getBooksWithAvailability(@RequestParam(value = "title", required = false) String title,
	        @RequestParam("draw") int draw, @RequestParam(value = "author", required = false) String author,
	        @RequestParam(value = "publicationYear", required = false) Integer publicationYear,
	        @RequestParam(value = "genre", required = false) String genreId,
	        @RequestParam(value = "search[value]", required = false) String searchValue,
	        
	        @RequestParam(value = "order[0][column]", defaultValue = "0") int orderColumn,
	        @RequestParam(value = "order[0][dir]", defaultValue = "asc") String orderDir,
	        @RequestParam(value = "availability", required = false) String availability) {

	    // Creare Pageable pentru sortare
	    Pageable pageable = PageRequest.of(0, Integer.MAX_VALUE, "asc".equals(orderDir)
	            ? Sort.by(orderColumn == 0 ? "title" : orderColumn == 1 ? "author" : "publicationYear")
	            : Sort.by(orderColumn == 0 ? "title" : orderColumn == 1 ? "author" : "publicationYear").descending());

	    Long genId = null;
	    if (genreId != "") {
	        List<Genre> genres = genreRepository.findFirstByNameContaining(genreId);
	        genId = (genres != null && !genres.isEmpty()) ? genres.get(0).getId() : null;
	    }

	    // Aplică filtrul
	    List<Book> books = searchBooksByFilter(title, author, genId, publicationYear, searchValue, pageable);
	    List<BookDTO> bookDTOs = new ArrayList<>();

	    // Iterează prin cărți și creează DTO-uri
	    for (Book book : books) {
	        BookDTO bookDTO = new BookDTO();
	        var avab = getAvailabilityStatus(book);
	        boolean addBook = true;

	        if (addBook) {
	            bookDTO.setId(book.getId());
	            bookDTO.setTitle(book.getTitle());
	            bookDTO.setAuthor(book.getAuthor());
	            bookDTO.setGenre(book.getGenre());
	            bookDTO.setPublicationYear(book.getPublicationYear());
	            bookDTO.setAvailability(avab);
	            bookDTOs.add(bookDTO);
	        }
	    }

	   
	    long totalFilteredRecords = bookDTOs.size();
	    long totalRecords = bookRepository.count(); 
	  
	    Map<String, Object> response = new HashMap<>();
	    response.put("draw", draw);
	    response.put("recordsTotal", totalRecords); 
	    response.put("recordsFiltered", totalFilteredRecords); 
	    response.put("data", bookDTOs);

	    return response;
	}

	public List<Book> searchBooksByFilter(String title, String author, Long genreId, Integer publicationYear,
			String searchValue, Pageable pageable) {

		return bookRepository.findBooksByCriteria(title, author, genreId, publicationYear, searchValue, pageable);
	}

	public String getAvailabilityStatus(Book book) {

		for (Loan loan : book.getLoans()) {
			if (loan.getReturnDate().isAfter(LocalDate.now())) {
				return "Împrumutat până la " + loan.getReturnDate();
			}
		}
		return "Disponibil";
	}
}
