package ro.scoalaPeterThal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import repository.BookRepository;
import repository.BookSpecification;
import repository.GenreRepository;
import basics.*;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

import java.util.List;
@Controller
public class BookContrl {
	@Autowired
	BookRepository bookRepository;
	
	@Autowired
	GenreRepository genreRepository;
	@Autowired
	private HttpSession session;

	@GetMapping("/books1")
	public String BooksList() {
		return "bookslist";
	}
	 public List<Genre> getAllGenres() {
	        return genreRepository.findAll();
	    }
	 public List<Book> searchBooks1(String title, String author, Long genreId, Integer publicationYear) {
		 Genre genre = null;
	        
	        
	        if (genreId != null) {
	            genre = genreRepository.findById(genreId).orElse(null);
	        }
	        
	        if ((title != null && !title.isEmpty())||
	        		(author != null && !author.isEmpty())||
	        		(genre != null)||
	        		publicationYear!=null) {
	            return bookRepository.findByTitleContainingAndAuthorContainingAndGenreIdAndPublicationYear(title, author, genreId, publicationYear);
	        } else {
	        	List<Book> searchBooks= bookRepository.findAll();
	        	 System.out.println(searchBooks);
	        	return searchBooks;
	        }
	    }
	 
	 public List<Book> searchBooks(String title, String author, Long genreId, Integer publicationYear) {
	        
	        Specification<Book> spec = BookSpecification.buildSpecification(title, author, genreId, publicationYear);
	        
	       
	        return bookRepository.findAll(spec);
	    }
	 @GetMapping("/books2")
	    public String showBooks(
	            @RequestParam(value = "title", required = false) String title,
	            @RequestParam(value = "author", required = false) String author,
	            @RequestParam(value = "genre", required = false) Long genreId,
	            @RequestParam(value = "publicationYear", required = false) Integer publicationYear,
	            Model model) {
	        
	        model.addAttribute("books", searchBooks(title, author, genreId, publicationYear));
	        model.addAttribute("genres", getAllGenres());  // Trimiterea genurilor
	        return "bookslist";
	    }

	    @GetMapping("/books")
	    public String getBooks(Model model,
	                           @RequestParam(defaultValue = "") String titleSearch,
	                           @RequestParam(defaultValue = "") String authorSearch,
	                           @RequestParam(defaultValue = "") String genreSearch,
	                           @RequestParam(defaultValue = "") String yearSearch,
	                           @RequestParam(defaultValue = "title") String sortBy,
	                           @RequestParam(defaultValue = "asc") String direction) {

	        // Căutare și sortare
	        Sort sort = Sort.by(Sort.Order.by(sortBy));
	        if (direction.equals("desc")) {
	            sort = sort.descending();
	        }

	        // Filtrarea cărților în funcție de parametrii de căutare
	        var books = bookRepository.findByTitleContainingAndAuthorContainingAndGenreNameContainingAndPublicationYearContaining(
	                titleSearch, authorSearch, genreSearch, yearSearch, sort);

	        model.addAttribute("books", books);
	        model.addAttribute("sortBy", sortBy);
	        model.addAttribute("direction", direction);
	        model.addAttribute("titleSearch", titleSearch);
	        model.addAttribute("authorSearch", authorSearch);
	        model.addAttribute("genreSearch", genreSearch);
	        model.addAttribute("yearSearch", yearSearch);

	        return "books";  // Numele paginii Thymeleaf
	    }
	    // Metoda AJAX pentru căutare în timp real
	    @GetMapping("/searchBooks")
	    @ResponseBody
	    public List<Book> searchBooksAjax(
	            @RequestParam(value = "title", required = false) String title,
	            @RequestParam(value = "author", required = false) String author,
	            @RequestParam(value = "genre", required = false) Long genre,
	            @RequestParam(value = "publicationYear", required = false) Integer publicationYear) {
	        
	        return searchBooks(title, author, genre, publicationYear);
	    }
	    
	    @GetMapping("/addBook")
	    public String showAddBookForm(Model model) {
	    	if(!CheckIfUserIsLoggedIn()) return "redirect:/login";
	        model.addAttribute("book", new Book());  
	        model.addAttribute("genres", genreRepository.findAll());  
	        return "addBook";
	    }
	    
	    @PostMapping("/addBook")
	    public String addBook(@Valid @ModelAttribute Book book, BindingResult result, Model model) {
	    	System.err.println(result.hasErrors());
	    	if (result.hasErrors()) {
	        	System.err.println(result.getAllErrors());
	            model.addAttribute("genres", genreRepository.findAll()); 
	            return "addBook";  
	        }
	        bookRepository.save(book);  
	        return "redirect:/";  
	    }
	    public Boolean CheckIfUserIsLoggedIn() {
			AppUser sessionUser = (AppUser) session.getAttribute("sessionUser");
			
			return sessionUser!=null;
		}
}
